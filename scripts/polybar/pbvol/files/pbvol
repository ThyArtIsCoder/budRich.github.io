#!/bin/bash

NAME="pbvol"
VERSION="0.001"
AUTHOR="unknown"
CONTACT=''
CREATED="2018-12-19"
UPDATED="2018-12-19"


main(){
  while getopts :vh option; do
    case "${option}" in
      v) printf '%s\n' \
           "$NAME - version: $VERSION" \
           "updated: $UPDATED by $AUTHOR"
         exit ;;
      h) printinfo && exit ;;
    esac
  done

  osd='no'
  inc='2'
  capvol='no'
  maxvol='200'
  autosync='yes'

  # Muted status
  # yes: muted
  # no : not muted
  curStatus="no"
  active_sink=""
  limit=$((100 - inc))
  maxlimit=$((maxvol - inc))

  reloadSink
  case "$1" in
      --up)
          volUp
          ;;
      --down)
          volDown
          ;;
      --togmute)
          volMuteStatus
          if [ "$curStatus" = 'yes' ]
          then
              volMute unmute
          else
              volMute mute
          fi
          ;;
      --mute)
          volMute mute
          ;;
      --unmute)
          volMute unmute
          ;;
      --sync)
          volSync
          ;;
      --listen)
          # Listen for changes and immediately create new output for the bar
          # This is faster than having the script on an interval
          listen
          ;;
      *)
          # By default print output for bar
          output
          ;;
  esac
}

reloadSink() {
    active_sink=$(pacmd list-sinks | awk '/* index:/{print $3}')
}

function volUp {

    getCurVol

    if [ "$capvol" = 'yes' ]
    then
        if [ "$curVol" -le 100 ] && [ "$curVol" -ge "$limit" ]
        then
            pactl set-sink-volume "$active_sink" -- 100%
        elif [ "$curVol" -lt "$limit" ]
        then
            pactl set-sink-volume "$active_sink" -- "+$inc%"
        fi
    elif [ "$curVol" -le "$maxvol" ] && [ "$curVol" -ge "$maxlimit" ]
    then
        pactl set-sink-volume "$active_sink" "$maxvol%"
    elif [ "$curVol" -lt "$maxlimit" ]
    then
        pactl set-sink-volume "$active_sink" "+$inc%"
    fi

    getCurVol

    if [ ${osd} = 'yes' ]
    then
        qdbus org.kde.kded /modules/kosd showVolume "$curVol" 0
    fi

    if [ ${autosync} = 'yes' ]
    then
        volSync
    fi
}

function volDown {

    pactl set-sink-volume "$active_sink" "-$inc%"
    getCurVol

    if [ ${osd} = 'yes' ]
    then
        qdbus org.kde.kded /modules/kosd showVolume "$curVol" 0
    fi

    if [ ${autosync} = 'yes' ]
    then
        volSync
    fi

}

function getSinkInputs {
    input_array=$(pacmd list-sink-inputs | grep -B 4 "sink: $1 " | awk '/index:/{print $2}')
}

function volSync {
    getSinkInputs "$active_sink"
    getCurVol

    for each in $input_array
    do
        pactl set-sink-input-volume "$each" "$curVol%"
    done
}

function getCurVol {
    curVol=$(pacmd list-sinks | grep -A 15 "index: $active_sink$" | grep 'volume:' | grep -E -v 'base volume:' | awk -F : '{print $3}' | grep -o -P '.{0,3}%'| sed s/.$// | tr -d ' ')
}

function volMute {
    case "$1" in
        mute)
            pactl set-sink-mute "$active_sink" 1
            curVol=0
            status=1
            ;;
        unmute)
            pactl set-sink-mute "$active_sink" 0
            getCurVol
            status=0
            ;;
    esac

    if [ ${osd} = 'yes' ]
    then
        qdbus org.kde.kded /modules/kosd showVolume ${curVol} ${status}
    fi

}

function volMuteStatus {
    curStatus=$(pacmd list-sinks | grep -A 15 "index: $active_sink$" | awk '/muted/{ print $2}')
}

# Prints output for bar
# Listens for events for fast update speed
function listen {
    firstrun=0

    pactl subscribe 2>/dev/null | {
        while true; do
            {
                # If this is the first time just continue
                # and print the current state
                # Otherwise wait for events
                # This is to prevent the module being empty until
                # an event occurs
                if [ $firstrun -eq 0 ]
                then
                    firstrun=1
                else
                    read -r event || break
                    if ! echo "$event" | grep -e "on card" -e "on sink"
                    then
                        # Avoid double events
                        continue
                    fi
                fi
            } &>/dev/null
            output
        done
    }
}

function output() {
    reloadSink
    getCurVol
    volMuteStatus
    if [ "${curStatus}" = 'yes' ]
    then
        # echo "V $curVol"
        echo " $curVol"
    else
        # echo "V $curVol"
        echo " $curVol"
    fi
} #}}}

printinfo(){
  case "$1" in
    m ) printf '%s' "${about}" ;;
    
    f ) 
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

bouthead="
${NAME^^} 1 ${CREATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>

SEE ALSO
--------

polybar(1), pactl(1)
"

about='
`pbvol` - Prints the volume of the active sink

SYNOPSIS
--------

`pbvol` [`-v`|`-h`] [`--up`|`--down`|`--togmute`|`--mute`|`--unmute`|`--sync`|`--listen`]
DESCRIPTION
-----------

`pbvol` finds the active sink for pulse audio and increments the volume. 
 useful when you have multiple audio outputs and have a key bound to vol-up and down

OPTIONS
-------

`-v`
  Show version and exit.

`-h`
  Show help and exit.

`--up`
  volUp
    
`--down`
  volDown
    
`--togmute`
  toggle mute
    
`--mute`
  mute
    
`--unmute`
  unmute
    
`--sync`
  volSync
    
`--listen`
  Listen for changes and immediately create new output for the bar
  This is faster than having the script on an interval


DEPENDENCIES
------------

pactl
pulseaudio
FontAwesome
'

if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
