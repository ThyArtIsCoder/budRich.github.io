#!/bin/bash

NAME="budtutor"
VERSION="0.012"
AUTHOR="budRich"
CONTACT='robstenklippa@gmail.com'
CREATED="2017-10-17"
UPDATED="2018-03-30"

IGNORE=''
WRAP=80
FIL='/tmp/budtutor.md'

declare -A tut

tut['0000-b-title']='This is budtutor'
tut['0000-b-command']='`Ctrl+Shift+p`'
tut['0000-b-help']='
```
mm                        mm                                                   
##                        ##    ##                  ##                         
##m###m   ##    ##   m###m##  #######   ##    ##  #######    m####m    ##m#### 
##"  "##  ##    ##  ##"  "##    ##      ##    ##    ##      ##"  "##   ##"     
##    ##  ##    ##  ##    ##    ##      ##    ##    ##      ##    ##   ##      
###mm##"  ##mmm###  "##mm###    ##mmm   ##mmm###    ##mmm   "##mm##"   ##      
"" """     """" ""    """ ""     """"    """" ""     """"     """"     ""      
A remixed mashup of VIMtutor and Sublime tutor, curated by budRich since 2017
```

This interactive tutorial is  mainly intended to teach how to use Sublime in 
Vintage mode. And my custom keybindings are piling up, so i thought i needed something to make me remember my own settings. I have customized quite a lot of the default keys, especially those related to Vintage. I use VI-ctrl keys and enabling them forced me to make new bindings for some classic sublime commands. The instructions in this tutorial are written with my own keymap as a template. So to follow along you either need to modify the tutor or use my settings. You can find it on my [homepage](link) or [github](link).

These are some of the more breaking changes to sublime defaults:

`Ctrl+d`         move half-page down
`Ctrl+u`         move half-page up
`Ctrl+b`         page up
`Ctrl+f`         page down
`Ctrl+e`         scroll one line down
`Ctrl+y`         scroll one line up
`Ctrl+r`         redo_or_repeat
`Ctrl+shift+p`   goto symbol (preivously `Ctrl+r`)
`:`              command palette (previously `Ctrl+shift+p`)
`Ctrl+.`         find under expand (previously `Ctrl+d`)
`Ctrl+Shift+.`   find under expand skip (previously `Ctrl+k; Ctrl+d`)
`Ctrl+Enter`     open URL in browser. (Clickable URLs package setting)
`Ctrl+shift+f`   slurp find 
`Ctrl+shift+h`   slurp replace
`Ctrl+w`         used as a modifier for window management.
                 `Ctrl+w w` is used to close tabs.
`Ctrl+Shift+i`    expand to indentation (previously `Ctrl+Shift+j`)
`Alt+Shift+j`    add cursor below
`Alt+Shift+h`    add cursor above
`Ctrl+Shift+j`   bubble line downwards
`Ctrl+Shift+h`   bubble line upwards

Based on VIMtutor by Michael C. Pierce and Robert K. Ware, Charles Smith and 
Bram Moolenaar.
And Sublime Tutor by Jai Pandya.
https://sublimetutor.com
'
tut['0000-b-exercise']='
Use `Ctrl+Shift+p` to go to a lesson'

tut['0010-m-title']='moving the cursor'
tut['0010-m-command']='`h`,`j`,`k`,`l`,`w`,`e`,`b`,`0`,`$`'
tut['0010-m-command']+=',`H`,`M`,`L`,`zz`,`zt`,`zb`'
tut['0010-m-command']+=',`Ctrl+d`,`Ctrl+u`,`Ctrl+b`,`Ctrl+f`,`Ctrl+e`,`Ctrl+y`'
tut['0010-m-help']='
    ^
    k
< h   l >       
    j         
    v

`h` is at the left and moves left.
`l` is at the right and moves right.
`j` looks like a down arrow.

`w` moves to the beginning of the next word
`e` moves to the end of the current word
`b` moves to the beginning of the previous word

`0` moves to the beginning of the line
`$` moves to the end of the line

`H`   moves to top of screen
`M`   moves to middle of screen
`L`   moves to bottom of screen

`zz`  scroll the line with the cursor to the center of the screen
`zt`  scroll the line with the cursor to the top
`zb`  scroll the line with the cursor to the bottom

`Ctrl+d`  move half-page down
`Ctrl+u`  move half-page up
`Ctrl+b`  page up
`Ctrl+f`  page down
`Ctrl+e`  scroll one line down
`Ctrl+y`  scroll one line up

If you are ever unsure about something you typed, press <esc> to place you in Normal mode. Then retype the command you wanted.
'
tut['0010-m-exercise']='Move the cursor around the screen until you are comfortable.'

tut['0020-m-title']='text editing - deletion'
tut['0020-m-command']='`x`'
tut['0020-m-help']='
Press `x` to delete the character under the cursor.
'
tut['0020-m-exercise']='
Fix the errors in the line below:
---> The baccon taister goooda whenn wee aren hunggry.
'
tut['0030-m-title']='text editing - insertion'
tut['0030-m-command']='`i`'
tut['0030-m-help']='
Press `i` to insert text. To make the first line the same as the second,' 
tut['0030-m-help']+='move the cursor on top of the first character after '
tut['0030-m-help']+='where the text is to be inserted. Press `i` and type '
tut['0030-m-help']+='in the necessary additions. As each error is fixed press '
tut['0030-m-help']+='<esc> to return to normal mode.
'
tut['0030-m-exercise']='
Make the first line similar to the second:

---> there is text misng this .
---> there is some text missing from this line.
'

tut['0040-m-title']='text editing - appending'
tut['0040-m-command']='`A`'
tut['0040-m-help']='
Press `A` to append text to the end of the line. Lowercase `a` puts you into the '
tut['0040-m-help']+='insert-mode to the right (after) the cursor. It does not matter '
tut['0040-m-help']+='on what character the cursor is in that line.
'
tut['0040-m-exercise']='
Make the first line similar to the second:

--->  there is some text missing from th
      there is some text missing from this line.

--->  there is also some text miss
      there is also some text missing here.
'

tut['0050-m-title']='delete word'
tut['0050-m-command']='`dw`'
tut['0050-m-help']='
Type `dw` to delete a word. Move the cursor to the beginning of a word that needs '
tut['0050-m-help']+='to be deleted. Type `dw` to make the word disappear. '
tut['0050-m-help']+='The letter `-delete` will appear on the statusbar. '
tut['0050-m-help']+='Sublime is waiting for you to type `w`. If you do not see `-delete` '
tut['0050-m-help']+='you typed something wrong; press  <esc>  and start over.
'
tut['0050-m-exercise']='
Fix the sentence by deleting words:
---> there bacon are a some words fun that do not belong in this install arch sentence.
'

tut['0060-m-title']='more deletion commands'
tut['0060-m-command']='`d$`'
tut['0060-m-help']='
Type `d$` to delete to the end of the line.

1. Press  <esc>  to make sure you are in normal mode.
2. Move the cursor to the line below marked --->.
3. Move the cursor to the end of the correct line (after the first . ).
4. Type `d$` to delete to the end of the line.
'
tut['0060-m-exercise']='
---> somebody typed the end of this line twice. end of this line twice.
'

tut['0070-m-title']='on operators and motions'
tut['0070-m-command']='`d`(motion)'
tut['0070-m-help']='
Many commands that change text are made from an operator and a motion. the format '
tut['0070-m-help']+='for a delete command with the `d` delete operator is as follows:

d      - Is the delete operator.
motion - Is what the operator will operate on (listed below).

a short list of motions:
::::::::::::::::::::::::

`w` - Until the start of the next word, excluding its first character.
`e` - To the end of the current word, including the last character.
`$` - To the end of the line, including the last character.
`b` - Back one word

Thus typing `de` will delete from the cursor to the end of the word.

Note:  Pressing just the motion while in normal mode without an operator will '
tut['0070-m-help']+='move the cursor as specified.'
tut['0070-m-exercise']='-'

tut['0075-m-title']='using a count for a motion'
tut['0075-m-command']='(n)(motion)'
tut['0075-m-help']='
Typing a number before a motion repeats it that many times.

1. Move the cursor to the start of the line marked ---> below.
2. Type `2w` to move the cursor two words forward.
3. Type `3e` to move the cursor to the end of the third word forward.
4. Type `0` (zero) to move to the start of the line.
5. Repeat steps 2 and 3 with different numbers.
'
tut['0075-m-exercise']='
Move around this line using count and motions:
---> this is just a line with words you can move around in.
'

tut['0077-m-title']='using a count to delete more'
tut['0077-m-command']='`d(count)(motion)`'
tut['0077-m-help']='
Typing a number with an operator repeats it that many times.

In the combination of the delete operator and a motion mentioned above you 
insert a count before the motion to delete more:  

1. Move the cursor to the first upper case word in the line marked --->.
2. Type `d2w` to delete the two upper case words
3. Repeat steps 1 and 2 with a different count to delete the consecutive upper '
tut['0077-m-help']+='case words with one command
'
tut['0077-m-exercise']='
Fix the sentence:
--->  this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.
'

tut['0105-m-title']='operating on lines'
tut['0105-m-command']='`dd`'
tut['0105-m-help']='
Type `dd` to delete a whole line.

Due to the frequency of whole line deletion, the designers of vi decided it '
tut['0105-m-help']+='would be easier to simply type two d-s to delete a line.

1. Move the cursor to the second line in the phrase below.
2. Type `dd` to delete the line.
3. Now move to the fourth line.
4. Type `2dd` to delete two lines.
'
tut['0105-m-exercise']='
Delete the lines that does not belong in the poem:
--->  1)  Roses are red,
--->  2)  Mud is fun,
--->  3)  Violets are blue,
--->  4)  I have a car,
--->  5)  Clocks tell time,
--->  6)  Sugar is sweet
--->  7)  And so are you.
'
tut['0100-m-title']='undo the last command'
tut['0100-m-command']='`u`'
tut['0100-m-help']='
Press `u` to undo the last commands.

1. Move the cursor to the line below marked ---> and place it on the
first error.
2. Type `x` to delete the first unwanted character.
3. Now type `u` to undo the last command executed.
4. This time fix all the errors on the line using the `x` command.
'
tut['0100-m-exercise']='
Fix the errors on the line, then undo them and fix them again:
---> fiix the errors oon thhis line and reeplace them witth undo.
'

tut['0110-m-title']='the put command'
tut['0110-m-command']='`p`,`dd`'
tut['0110-m-help']='
Type `p` to put previously deleted text after the cursor.  

1. Move the cursor to the first ---> line below.
2. Type `dd` to delete the line and store it in a vim register.
3. Move the cursor to the c) line, above where the deleted line should go.
4. Type `p` to put the line below the cursor.
5. Repeat steps 2 through 4 to put all the lines in correct order.

Hint: You can also move lines (bubble) with these Sublime hotkeys:

Move line up:
`ctrl+shift+k`
`ctrl+shift+up`

Move line down:
`ctrl+shift+j`
`ctrl+shift+down`
'
tut['0110-m-exercise']='
Delete lines and put them in the right place:

---> d) Can you learn too?
---> b) Violets are blue,
---> c) Intelligence is learned,
---> a) Roses are red,
'

tut['0120-m-title']='the replace command'
tut['0120-m-command']='`r`'
tut['0120-m-help']='
Type `rx` to replace the character at the cursor with `x`.  

1. Move the cursor to the first line below marked --->.
2. Move the cursor so that it is on top of the first error.
3. Type `r` and then the character which should be there.
4. Repeat steps 2 and 3 until the first line is equal to the second one.
'
tut['0120-m-exercise']='
Make the first line similar to the second by replacing characters:

--->  whan this lime was tuoed in, someone presswd some wrojg keys!
--->  when this line was typed in, someone pressed some wrong keys!
'

tut['0130-m-title']='the change operator'
tut['0130-m-command']='`ce`'
tut['0130-m-help']='
To change until the end of a word, type `ce`.  

1. Move the cursor to the first line below marked --->.
2. Place the cursor on the `u` in lubw.
3. Type `ce` and the correct word (in this case, type  ine ).
4. Press <esc> and move to the next character that needs to be changed.
5. Repeat steps 3 and 4 until the first sentence is the same as the second.

Notice that `ce` deletes the word and places you in insert mode.
'
tut['0130-m-exercise']='
Change the faulty words in the top sentence:

---> this lubw has a few wptfd that mrrf changing usf the change operator.
---> this line has a few words that need changing using the change operator.
'


tut['0140-m-title']='more change'
tut['0140-m-command']='c(number)(motion)'
tut['0140-m-help']='
The change operator is used with the same motions as delete. 

1. Move to the first line below marked --->.
2. Move the cursor to the first error.
3. Type `c$` and type the rest of the line like the second and press <esc>.
'
tut['0140-m-exercise']='
Change the errors in the first line:

---> the end of this line needs some help to make it like the second.  
---> the end of this line needs to be corrected using the  c$  command.
'

tut['0150-m-title']='cursor location and file status'
tut['0150-m-command']='`ctrl+g`,`gg`,`G`'
tut['0150-m-help']='
Type `g` to move to a line in the file. 

Note: Read this entire lesson before executing any of the steps!!

Take note of the current linenumber!

1. Hold down the `ctrl` key and press `g`.  we call this '
tut['0150-m-help']+='`ctrl-g`. A popup will appear prompting for a line number to go to.
2. Press `G` to move you to the bottom of the file.
3. Type `gg` to move you to the start of the file.
4. Type the number of the line you were on and then `G`. This will return you 
to the line you were on when you first pressed `ctrl-g`.
5. If you feel confident to do this, execute steps 1 through 3.
'
tut['0150-m-exercise']='
Go to the bottom and the top of the file, then return to this line.
'

tut['0160-m-title']='the search command'
tut['0160-m-command']='`/`,`F3`,`n`,`N`'
tut['0160-m-help']='
Type `/` followed by a phrase to search for the phrase.  

1. In normal mode type the `/` character. 
2. Now type `errroor` <enter>.  this is the word you want to search for.
3. To search for the same phrase again, simply type `f3` or `n`. to search for '
tut['0160-m-help']+='the same phrase in the opposite direction, type `shift+f3` or `N`.
4. To search for a phrase in the backward direction, use `?` instead of `/`.
'
tut['0160-m-exercise']='
--->  "errroor" is not the way to spell error;  errroor is an error.
'

tut['0170-m-title']='matching parentheses search'
tut['0170-m-command']='`%`'
tut['0170-m-help']='
Type `%` to find a matching ),], or } .   

1. Place the cursor on any (, [, or { in the line below marked --->.
2. Now type the `%` character.
3. The cursor will move to the matching parenthesis or bracket.
4. Type `%` to move the cursor to the other matching bracket.
5. Move the cursor to another (,),[,],{ or } and see what `%` does.
'
tut['0170-m-exercise']='
Jump around the parentheses

---> this ( is a test line with (s, [s ] and {s } in it. ))
'

tut['0172-m-title']='the open command'
tut['0172-m-command']='`o`,`O`'
tut['0172-m-help']='
Type `o` to open a line below the cursor and place you in insert mode.  

1. Move the cursor to the line below marked --->.
2. Type the lowercase letter `o` to open up a line below the cursor and place you in insert mode.
3. Now type some text and press <esc> to exit insert mode.
4. To open up a line above the cursor, simply type a capital `O`, '
tut['0172-m-help']+='rather than a lowercase `o`. Try this on the lines below.
'
tut['0172-m-exercise']='
---> after typing `o` the cursor is placed on the open line in insert mode.

---> open up a line above this by typing `o` while the cursor is on this line.
'

tut['0174-m-title']='the append command'
tut['0174-m-command']='`a`'
tut['0174-m-help']='
Type `a` to insert text after the cursor.   

1. Move the cursor to the start of the line below marked --->.
2. Press `e` until the cursor is on the end of  li .
3. Type an `a` (lowercase) to append text after the cursor.
4. Complete the word like the line below it. Press <esc> to exit insert mode.
5. Use `e` to move to the next incomplete word and repeat steps 3 and 4.

Note: `A`, `I`, `i` and `a` all go to the same insert mode, the only difference '
tut['0174-m-help']+='is where the characters are inserted.'
tut['0174-m-exercise']='
Append characters to the incomplete words:

---> this li will allow you to pract appendi text to a line.  
---> this line will allow you to practice appending text to a line.
'


tut['0200-m-title']='yank and put text'
tut['0200-m-command']='`y`,`p`,`yy`'
tut['0200-m-help']='
Use the `y` operator to copy text and `p` to paste it.  

1. Go to the line marked with ---> below and place the cursor after "a)".
2. Start visual mode with `v` and move the cursor to just before "first".
3. Type `y` to yank (copy) the highlighted text.
4. Move the cursor to the end of the next line: `j$`  
5. Type `p` to put (paste) the text. then type: a second <esc> .
6. Use visual mode to select " item.", yank it with `y`, move to the end of the 
next line with `j$` and put the text there with `p`.

Note: you can also use `y` as an operator; `yw` yanks one word.
Note: You can yank the whole line with `yy`
'
tut['0200-m-exercise']='
Yank the sentence and put a copy of it on the second line:

--->  a) this is the first item.
      b)
'

tut['0220-s-title']='upper / lower case'
tut['0220-s-command']='`ctrl+k;ctrl+l`,`ctrl+k;ctrl+u`,`~`,`gU`,`gu`'
tut['0220-s-help']='
You can use two handy hotkeys to change the case any text block in sublime.

* lower case - `Ctrl+k, Ctrl+l`
* upper case - `Ctrl+k, Ctrl+u`

That is, press `Ctrl+k` directly followed by `Ctrl+l` or `Ctrl+u` to
change the case. In practice, you do not need to pull your finger from the 
`ctrl`
key while doing that. so, press `ctrl` with `k` and then lift your finger from
`k` and press `u` to make an upper case transform. 

In vintage mode you can hit `~` to change the case of the character under the cursor. '
tut['0220-s-help']+='Or `gU(motion)` to translate to uppercase `gu(motion)` for lowercase.
'
tut['0220-s-exercise']='
Toggle the case of all the words given below. If the existing case is lower
then make it upper, if the existing case is upper, then make it lower.

```
TOGGLE
case
of
ALL
the
words
OF
this
BLOCK
```
'

tut['0230-s-title']='joining lines'
tut['0230-s-command']='`ctrl+j`'
tut['0230-s-help']='
Sublime text makes it conveniently easy for you to join two lines into one.
'
tut['0230-s-exercise']='
You can notice pairs of lines below. join the pair of lines into one to form '
tut['0230-s-exercise']+='one long sentence. put the cursor anywhere on the '
tut['0230-s-exercise']+='first line and press `Ctrl+j`

```
this is a candidate for joining with
another sentence written on next line number.

this is another such example with one line spanning over
two lines.

join this line with
this line to form a longer line.
```
'

tut['0240-s-title']='bubble the line up / down'
tut['0240-s-command']='`ctrl+shift+up`,`ctrl+shift+k`,`ctrl+shift+down`,`ctrl+shift+j`'
tut['0240-s-help']='
* bubble the line up - `Ctrl+Shift+up` or `ctrl+shift+k`
* bubble the line down - `Ctrl+Shift+down` or `ctrl+shift+j`
'
tut['0240-s-exercise']='
1. first sort the block given below by bubbling the lines.
2. now delete the lines using `delete line` command.

```
6. this is line number six
1. this is line number one
6. this is line number six
5. this is line number five
4. this is line number four
3. this is line number three
2. this is line number two
2. this is line number two
3. this is line number three
```
'

tut['0250-s-title']='duplicating lines'
tut['0250-s-command']='`ctrl+shift+d`'
tut['0250-s-help']='
Put a cursor anywhere on a line and use this hotkey to create a '
tut['0250-s-help']+='duplicate copy of the line. If something is selected, '
tut['0250-s-help']+='then instead of the line, selection is copied over.
'
tut['0250-s-exercise']='
Duplicate lines:  

```

1. duplicate this line

2. duplicate this line as well

3. this line also needs to be duplicated

4. the last one, but once more

5. the previous line lied it seems

```
'

tut['0260-s-title']='indent / unindent'
tut['0260-s-command']='`ctrl+]`,`ctrl+[`'
tut['0260-s-help']='
* indent - `Ctrl+]`
* unindent - `Ctrl+[`

These hotkeys indent / unindent the selected text. If no content is selected then the '
tut['0260-s-help']+='current line is moved.
'
tut['0260-s-exercise']='
there are multiple lines in the block given below. each line is indented at a '
tut['0260-s-exercise']+='different level. use the hotkey learned above so that all '
tut['0260-s-exercise']+='the lines start at column number 4 (four spaces)

there are two way to do it.

1. indent every line individually except for 8,9,10.
2. for 8,9,10 select all three and then use un-indent five times to '
tut['0260-s-exercise']+='indent it at column 4.

another way would be quicker.

1. select the whole block
2. now use unindent command untill all statements are indented at '
tut['0260-s-exercise']+='first column. now indent twice to move the '
tut['0260-s-exercise']+='whole block to column 4

```

1 first line first level
  2 second line second level
    3 third line third level
      4 fourth line fourth level
        5 fifth line fifth level
          6 sixth line sixth level
            7 seventh line seventh level
              8 eighth line eighth level
              9 ninth line eighth level
              10 tenth line eighth level

```
'

tut['0270-s-title']='comment / uncomment'
tut['0270-s-command']='`ctrl+/`,`Ctrl+Shift+/`'
tut['0270-s-help']='
Commenting is an important feature of almost every programming language. '
tut['0270-s-help']+='These are the parts of the language that are targeting '
tut['0270-s-help']+='for a human and the compiler / interpreter ignores them. '
tut['0270-s-help']+='Sublime text provides a hotkey to mark lines as comments.

For different programming languages comment construct could be different. e.g. '
tut['0270-s-help']+='For `html` it is `<!-- comment -->` while for javascript it '
tut['0270-s-help']+='is `//` or `/* */`

`Ctrl+Shif+/` creates a block comment if the language syntax supports it.
'
tut['0270-s-exercise']='
As this file is written using markdown syntax, comments take the form of `html` comments.

In the block given below, some of the lines are wrapped in `html` comments. '
tut['0270-s-exercise']+='Use the toggle comments keyboard hotkey learned above to uncomment '
tut['0270-s-exercise']+='those lines.

Sublime wraps / unwraps them in `html` comments because this particular file is a '
tut['0270-s-exercise']+='`Markdown` file where `html` comments can be used. '
tut['0270-s-exercise']+='Depending upon the language used, or selected in the '
tut['0270-s-exercise']+='lower right corner, this functionality would change.

Try changing the syntax from `Markdown` to `JavaScript` or `ruby` by clicking at the '
tut['0270-s-exercise']+='lower right corner of sublime text. Play with this command a bit then.

Another way of changing the language is through command palette. '
tut['0270-s-exercise']+='Press `Ctrl+Shift+p` and type `syntax javascript` to select '
tut['0270-s-exercise']+='JavaScript language from the list of languages.

<div>
  <ul>
  <!-- <li>first list item</li> -->
  <!-- <li>second list item</li> -->
  <li>third list item</li>
  </ul>
<!--   <div>
  </div> -->
</div>
'


tut['0280-s-title']='multiple cursors'
tut['0280-s-command']='`Ctrl+Button1`'
tut['0280-s-help']='
Sublime text provides you a way to put your cursor in multiple text blocks at the same time. '
tut['0280-s-help']+='Use `Ctrl` key with the left mouse button and click at multiple places '
tut['0280-s-help']+='in the document to put your cursor at all those locations. Now, when '
tut['0280-s-help']+='you type something, the text is automatically appended at the cursor '
tut['0280-s-help']+='locations.

Multiple cursors - `Ctrl` key with the left mouse button
'
tut['0280-s-exercise']='
In the list given below, add an asterisk followed by space (`* `) in the '
tut['0280-s-exercise']+='beginning of each item. 

Create multiple cursors with the mouse.

```

tab
caps lock
shift
control
command
option
space

```
'

tut['0290-s-title']='multiple selection'
tut['0290-s-command']='`ctrl+drag`'
tut['0290-s-help']='
Extending the same discussion around `multiple cursor`, you can extend this '
tut['0290-s-help']+='trick to select text at multiple places. Press `Ctrl` '
tut['0290-s-help']+='key and then drag select multiple blocks of text in the document. '
tut['0290-s-help']+='Once you are in multiple selection mode, you can also use the usual '
tut['0290-s-help']+='`Shift+(up|down|left|right)` hotkeys to select blocks of text.
'
tut['0290-s-exercise']='
In the list given below, drag select the items with `<==` marked on them. '
tut['0290-s-exercise']+='Now delete them and replace with three tildas `~~~`

```

tab
caps lock <==
shift
control <==
command
option
space <==

```

Once you perform the exercise, the block given above should like somewhat like this:

```

tab
~~~
shift
~~~
command
option
~~~

```
'

tut['0300-s-title']='column selection'
tut['0300-s-command']='`alt+shift+up`,`alt+shift+k`,`alt+shift+down`,`alt+shift+j`'
tut['0300-s-help']='
If you want to have multiple cursors in a column, then `Ctrl+click` could '
tut['0300-s-help']+='become cumbersome pretty soon. For this, there is another '
tut['0300-s-help']+='convenient method that sublime text provides.

Keyboard hotkeys:
- `Alt+Shift+up` or `Alt+Shift+k`
- `Alt+Shift+down` or `Alt+Shift+j`
'
tut['0300-s-exercise']='
In the list given below add an asterisk followed by space (`* `) in the beginning of '
tut['0300-s-exercise']+='each item. Use column selection (keyboard) to create multiple cursors:

```

tab
caps lock
shift
control
command
option
space

```
'

tut['0310-s-title']='split block of text selection into multiple lines'
tut['0310-s-command']='`ctrl+shift+l`'
tut['0310-s-help']='
If you need a cursor on each line in a region, then Sublime text provides one '
tut['0310-s-help']+='more way of doing it. Drag select a region of text, then press '
tut['0310-s-help']+='`Ctrl+Shift+l`. This splits it into one selection per line.
'
tut['0310-s-exercise']='
In the list given below add an asterisk followed by space (`* `) in the beginning of '
tut['0310-s-exercise']+='each item. Create multiple cursors from selection.

```

tab
caps lock
shift
control
command
option
space

```
'

tut['0320-s-title']='select word with multiple occurrences'
tut['0320-s-command']='`Ctrl+Shift+.` (previously `Ctrl+d`)'
tut['0320-s-help']='
Select word once                - `Ctrl+.`
Select occurrences of this word - `Ctrl+.` multiple times for each occurrence.

If you want to quickly select all the occurrences of a word, this hotkey would prove '
tut['0320-s-help']+='to be very useful. Put the cursor on the word that needs to be selected, '
tut['0320-s-help']+='now press `Ctrl+.` as many times as it appears in the document. '
tut['0320-s-help']+='This puts us in multiple cursor mode and we can do some editing '
tut['0320-s-help']+='operations on the selected occurrences.

quick skip word
:::::::::::::::

While you use `Ctrl+.` to select multiple occurrences of a word, if there is a word that '
tut['0320-s-help']+='you do not want to select, use `Ctrl+Shift+.` '
tut['0320-s-help']+='(previously `ctrl+k;ctrl+d`)to skip the word under cursor.
'
tut['0320-s-exercise']='
In the block given below, select all the occurrences of the word `phone` and change it to `android`.

```

phone
windows
ios
osx
linux
ubuntu
phone
ubuntu
ios
phone
windows

```
In the block given below, select all the occurrences of the word `phone`
and change it to `android`. Skip iphones. 

```

phone
windows
ios
osx
iphone
linux
ubuntu
phone
iphone
ubuntu
ios
phone
windows

```
'

tut['0330-s-title']='selecting lines'
tut['0330-s-command']='`ctrl+l`'
tut['0330-s-help']='
if you want to select a line, use the `Ctrl+l` hotkey. pressing it again selects '
tut['0330-s-help']+='next line consecutively.
'
tut['0330-s-exercise']='
```

1. this line should not be selected
2. please select this line <==
3. please select this line <==
4. please select this line <==
5. please select this line <==
4. this line should not be selected

```
'




tut['0340-s-title']='selecting content between the brackets'
tut['0340-s-command']='`ctrl+shift+m`'
tut['0340-s-help']='
While coding some stuff, it is generally a frequent requirement to select the content '
tut['0340-s-help']+='between a set of brackets. Sublime text makes is really easy to do so.

Place your cursor anywhere between a pair of brackets and press `Ctrl+Shift+m` to select the '
tut['0340-s-help']+='content between the two brackets.
'
tut['0340-s-exercise']='
In the code segment below, select the content written in the brackets of the `while` condition, and replace it with `!done`.

```

var done = false;
var counter = 1;
while ( some long variable which is a truthy value ) {
  console running
  if (counter > 10) {
    done = true;
  }
  counter += 1;
}

```
'

tut['0350-s-title']='expand selection to indentation'
tut['0350-s-command']='`Ctrl+Shift+i`'
tut['0350-s-help']='
If you want to select some text which is below the same indentation level '
tut['0350-s-help']+='as this text. You can use the hotkey given below.
'
tut['0350-s-exercise']='
Select the region which is indented at eighth level, and `unindent` it once. '
tut['0350-s-exercise']+='Use the hotkey for indenting / unindenting a block of text.

```

1 first line first level
  2 second line second level
    3 third line third level
      4 fourth line fourth level
        5 fifth line fifth level
          6 sixth line sixth level
            7 seventh line seventh level
              8 eighth line eighth level
              9 ninth line eighth level
              10 tenth line eighth level

```
'
tut['0355-s-title']='expand selection to scope'
tut['0355-s-command']='`ctrl+shift+space`'
tut['0355-s-help']='
This is super useful in a lot of conditions. The good part about this hotkey is that '
tut['0355-s-help']+='on every consecutive press it expands to the immediate parent scope.
'
tut['0355-s-exercise']='
Expand selection in the block below:

```

var commentbox = react.createclass({
  render: function() {
    return (
      <div classname="commentbox">
        hello, world! i am a commentbox.
      </div>
    );
  }
});
reactdom.render(
  <commentbox />,
  document.getelementbyid(content)
);


```
'

tut['0360-s-title']='code folding / unfolding'
tut['0360-s-command']='`ctrl+shift+[`,`ctrl+shift+]`'
tut['0360-s-help']='
When you are working with nested code structures, you can see a folded view '
tut['0360-s-help']+='of your code to get a larger picture.

* fold one level - `Ctrl+Shift+[`
* unfold code one level - `Ctrl+Shift+]`
'
tut['0360-s-exercise']='
Fold/Unfold from inside the `<p>` tag:

```

<!doctype html>
<html>
  <head>
  <title>title</title>
  </head>
  <body>
    <div>
      <h1>some heading</h1>
      <p>example paragraph</p>
    </div>
  </body>
</html>

```
'

tut['0370-s-title']='find...'
tut['0370-s-command']='`/`,`F3`,`n`,`N`,`Shift+F3`,`Alt+F3`,`Ctrl+Shift+f`'
tut['0370-s-help']='
The most basic way of finding a word in sublime text is just `double clicking` it. '
tut['0370-s-help']+='It selects the word which was double clicked and all other '
tut['0370-s-help']+='occurrences of this word are highlighted. Once you click somewhere '
tut['0370-s-help']+='else, you exit the search mode as well.

For more advanced cases, we would like to open the `find...` panel.

* Find - `/`
* Find next - `f3` `n`
* Find previous - `Shift+f3` `N`
* Find all - `Alt+f3` or `Alt+return` when find panel is open

slurp to find
:::::::::::::

`Ctrl+Shift+f`

This commands puts the selection or the word on which the cursor is pointing into the '
tut['0370-s-help']+='find buffer. So next time when you open find panel, press `f3` or '
tut['0370-s-help']+='`n` this search term is used for finding stuff.
'
tut['0370-s-exercise']='
1. Search for the term `phone` in this document
2. Cycle through all the occurrences using until you get comfortable with this command.
3. Cycle in the opposite order using, press this multiple times until you get comfortable with this command.
4. Now find/select all the instances of `phone`.
5. Press <esc> to exit the multiple selection mode.

```

phone
windows
ios
osx
linux
ubuntu
phone
ubuntu
ios
phone
windows

```
'

tut['0380-s-title']='replace'
tut['0380-s-command']='`Ctrl+h`,`Ctrl+Shift+h`,`Ctrl+Alt+Return`'
tut['0380-s-help']='
Find is incomplete without replace and vice versa.

There would always be cases when you would want to search for a specific term '
tut['0380-s-help']+='and get it replaced with some other term. in such cases, '
tut['0380-s-help']+='this hotkey would come in handy.

* replace panel - `Ctrl+h` also slurps selection to the replace field.
* replace next - `Ctrl+Shift+h`
* replace all - `Ctrl+Alt+Return` (only when replace panel is open)
'
tut['0380-s-exercise']='
You have a long string with 10 underscores below. use find and replaces panel to '
tut['0380-s-exercise']+='replace it with an empty string.

Then use the undo command to restore the block.

```

__________

__________

__________

~~~~~~~~~~

```

1. In the exercise block above, select the first line that contains tildes `~~~~~~~`.
2. Now first press `Ctrl+h` so 10 tildes take the place of replace term.
3. Now go to the first line which has series of hyphens `-` characters in it.
4. Press `Ctrl+d` to select this term.
5. Press `Ctrl+Shift+f`, this copies an empty string in the find field of replace panel.
4. Now press `Ctrl+Shift+h` three times, this should replace all three strings with an empty one.
'


tut['0390-s-title']='quick find'
tut['0390-s-command']='`Ctrl+f3`'
tut['0390-s-help']='
What if you do not want to open the search panel up but want to search for the '
tut['0390-s-help']+='currently selected term in the document with just one keystroke. '
tut['0390-s-help']+='These cases happen to be quite common in software development. '
tut['0390-s-help']+='This command does exactly that.

Select a term or put your cursor on a word and press `Ctrl+f3` to find other occurrences '
tut['0390-s-help']+='of it in the document.
'
tut['0390-s-exercise']='
1. In the list given below, put your cursor on the term `phone` and then use the '
tut['0390-s-exercise']+='hotkey `quick find` to cycle through all other occurrences '
tut['0390-s-exercise']+='of this word.
2. Do the same with all other terms (windows, ios, osx...) in the list.

```

phone
windows
ios
osx
linux
ubuntu
phone
ubuntu
ios
phone
windows

```
'

tut['0400-s-title']='quick find previous'
tut['0400-s-command']='`Ctrl+Shift+f3`'
tut['0400-s-help']='
While quick find command executes in top to bottom order, quick find previous command '
tut['0400-s-help']+='does exactly the same thing but in the opposite order.
'
tut['0400-s-exercise']='
1. In the list given below, use the quick find previous hotkey to cycle through '
tut['0400-s-exercise']+='other occurrences of a term in the opposite order.
2. do this for each term.

```

phone
windows
ios
osx
linux
ubuntu
phone
ubuntu
ios
phone
windows

```
'

tut['0410-s-title']='quick find all'
tut['0410-s-command']='`Alt+F3`'
tut['0410-s-help']='
`Ctrl+F3` and `Ctrl+Shift+F3` are good for cycle through all the occurrences one by by one. '
tut['0410-s-help']+='What if you want all commands selected (multiple cursor mode) '
tut['0410-s-help']+='for the selected search term?

`Quick find all` command will help us achieve that.
'
tut['0410-s-exercise']='
1. in the list given below, use the quick find all hotkey to select all occurrences of a search term at the same time
2. press `esc` to come out of multiple selection mode.
3. do this for each term.

```

phone
windows
ios
osx
linux
ubuntu
phone
ubuntu
ios
phone
windows

```
'

tut['0420-p-title']='zen tabs'
tut['0420-p-command']='`Alt+Tab`'
tut['0420-p-help']='
To open tab browser just press `alt+tab` (default - can be changed in key-binding) 

You can proceed to push alt+tab and move through tabs, or use arrow keys to move through tabs, or start typing name of tab to filter items in panel.

Zen symbols:
^ current opened tab
* modified tab
# read only tab

https://github.com/travmik/zentabs
'
tut['0420-p-exercise']='-'

tut['0430-p-title']='iOpener'
tut['0430-p-command']='`Ctrl+o`'
tut['0430-p-help']='
iOpener is a very simple yet very useful and timesaving package. after installation it will replace the default `open-file` dialouge with a neat little keyboard friendly menu.

Use `ctrl+o`as usual (or choose find file in the command pallete.).
Pressing tab will cause smart completion to occur (hint: f1 can complete to filename1!).
Double-pressing tab will give you the directory listing.
Up/Down allow you to navigate previously entered paths.

Opening a path that does not exist will create a new file or directory.

https://github.com/rosshemsley/iopener
'
tut['0430-p-exercise']='-'

tut['0440-p-title']='aligntab'
tut['0440-p-command']='`Ctrl+Shift+a`'
tut['0440-p-help']='
This is a quite advanced package that aligns stuff based on a `regex`.

I have bound it to a hotkey, but you can also access the function from the context menu or command pallette (`ctrl+shift+p`)

```
{
  "keys": ["ctrl+shift+a"], "command": "align_tab",
  "args" : {"live_preview" : true}
}
```

more examples on the github page:
https://github.com/randy3k/aligntab/wiki/examples
'
tut['0440-p-exercise']='
select the three lines below and hit `ctrl+shift+a` then enter `=/f`  

```
apple =   1==0
banana =100
  car = 2
```
'

tut['0450-p-title']='clickableURLs'
tut['0450-p-command']='`Ctrl+Enter`'
tut['0450-p-help']='
This package makes urls clickable or you can hit a hotkey to open them in a webbrowser. '
tut['0450-p-help']+='The default hotkey, `ctrl+alt+enter`, clashes with replace all, '
tut['0450-p-help']+='so i recommend remapping it. I have it set to `Ctrl+Enter`. '
tut['0450-p-help']+='I currently browse with vivaldi and to get that to work '
tut['0450-p-help']+='I had to make a special rule in the clickable urls settings (menu):

```
{
  "clickable_urls_browser": "/usr/bin/vivaldi %s &"
}
```

to find the absolute path of vivaldi, i entered this in a terminal:`whereis vivaldi`

https://github.com/leonid-shevtsov/clickableurls_sublimetext
'
tut['0450-p-exercise']='-'

tut['0460-p-title']='File Rename'
tut['0460-p-command']='`F2`'
tut['0460-p-help']='
It does what it says on the box.  

I have bound a custom hotkey to this command, that makes more sense to me: 

```
{ "keys": ["f2"], "command": "file_rename" }
```

https://github.com/brianlow/filerename
'
tut['0460-p-exercise']='-'


main(){
  while getopts :vhsmpcxro: option; do
    case "${option}" in
      s) sect+="${option}";;
      m) sect+="${option}";;
      p) sect+="${option}";;
      c) opts="${option}";;
      x) opts="${option}";;
      r) randomize=1;;
      o) termo=1;;
      v) printf '%s\n' \
           "$NAME - version: $VERSION" \
           "updated: $UPDATED by $AUTHOR"
         exit ;;
      h|*) printinfo && exit ;;
    esac
  done

  for k in "${!tut[@]}"; do
    # create list of exercises
    [[ ${k##*-} != title ]] && continue
    exrclst+="${k%-*}\n"
  done

  [[ $randomize -ne 1 ]] \
    && exrclst="$(echo -e "$exrclst" | sort)" \
    || exrclst="$(echo -e "$exrclst" | sort -R)" 

  for e in ${exrclst}; do
    csec=${e:5:1}
    [[ -n $sect ]] && [[ ! $sect =~ "$csec" ]] && continue
    [[ -n $IGNORE ]] && [[ $IGNORE =~ "${e%%-*}" ]] && continue

    nexr=${e%%-*}

    if [[ -n $opts ]] || [[ -n $sect ]] || [[ $randomize -eq 1 ]]; then
      [[ $nexr = '0000' ]] && continue
    fi
    [[ -n $opts ]] && [[ ${tut[$e-exercise]} = '-' ]] && continue
    case $csec in
      s ) clng='sublime' ;;
      m ) clng='VIM'     ;;
      p ) clng='package' ;;
    esac
    # ttl template
    # ## title .-. clng - nexr
    # fold -w$WRAP -s
    sep=$(eval printf '%0.1s' "."{1..$WRAP})
    pad=${sep//./':'}
    ttl=$(printf '## %s %*.*s %s - %s' "${tut[$e-title]}" 0 $((${#sep} - 8 - ${#tut[$e-title]} - ${#clng} - ${#nexr} )) "$pad" "$clng" "$nexr")
    # ttl=$(printf '## %s %5s - %s' "${tut[$e-title]}" "$clng" "$nexr")
    tofile+="$sep\n"
    tofile+="$ttl\n"
    tofile+="$sep\n\n"
    [[ $opts != x ]] \
      && tofile+="Command:\n$(echo -e "${tut[$e-command]//','/' '}" | fold -w$WRAP -s)\n\n" \
      && [[ $opts != c ]] \
        && tofile+="$(echo -e "${tut[$e-help]}" | fold -w$WRAP -s)\n\n"
    # tofile+="${tut[$e-help]}\n"
    if [[ $opts != x ]] && [[ ${tut[$e-exercise]} != '-' ]]; then
        tofile+="Exercise:\n"
    fi
      [[ ${tut[$e-exercise]} = '-' ]] || tofile+="$(echo -e "${tut[$e-exercise]}" | fold -w$WRAP -s)\n\n"
  done

  if [[ $termo -ne 1 ]]; then
    echo -e "$tofile" > "${FIL}"
    subl "${FIL}"
  else
    echo -e "$tofile"
  fi
}

printinfo(){
  case "$1" in
    m ) printf '%s' "${about}" ;;
    
    f ) 
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

bouthead="
${NAME^^} 1 ${CREATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>
"

about='
`budtutor` - Interactive tutorial for Sublime Text

SYNOPSIS
--------

`budtutor` [`OPTION`]

DESCRIPTION
-----------

Interactive tutorial for sublime text.
It is a mashup of vimtutor and sublime tutor.

If executed without options, the whole budtutor
will be opened in sublime text.

OPTIONS
-------

`-h`
  Displays this info and exits

`-v`
  Displays version and exits

`-s`
  Shows '"'"'sublime'"'"' exercises

`-m`
  Shows '"'"'vim'"'"' exercises

`-p`
  Shows '"'"'packages'"'"' exercises

`-c`
  Compact view, only exercise and command

`-x`
  Minimal view, only exercise

`-r`
  Randomize exercises

`-o`
  Output to terminal
'

if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
